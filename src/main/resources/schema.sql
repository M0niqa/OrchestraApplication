DROP TABLE IF EXISTS App_user CASCADE;
DROP TABLE IF EXISTS Project CASCADE;
DROP TABLE IF EXISTS UserRole CASCADE;
DROP TABLE IF EXISTS App_user_roles CASCADE;
DROP TABLE IF EXISTS ChatMessage CASCADE;
DROP TABLE IF EXISTS AgreementTemplate CASCADE;
DROP TABLE IF EXISTS invited_musicians_projects CASCADE;
DROP TABLE IF EXISTS accepted_musicians_projects CASCADE;
DROP TABLE IF EXISTS rejected_musicians_projects CASCADE;


CREATE TABLE AgreementTemplate (
        id BIGINT AUTO_INCREMENT PRIMARY KEY,
        content TEXT,
        templateType VARCHAR(255)
);

CREATE TABLE App_user (
        id BIGINT AUTO_INCREMENT PRIMARY KEY,
        DTYPE VARCHAR(255),
        firstName VARCHAR(255),
        lastName VARCHAR(255),
        email VARCHAR(255) UNIQUE,
        password VARCHAR(255),
        birthdate DATE,
        address VARCHAR(255),
        taxOffice VARCHAR(255),
        bankAccountNumber VARCHAR(255),
        pesel VARCHAR(11) UNIQUE,
        instrument VARCHAR(255)
);

CREATE TABLE Project (
         id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
         name VARCHAR(255) NOT NULL,
         description TEXT,
         startDate DATE,
         endDate DATE,
         location VARCHAR(255),
         conductor VARCHAR(255),
         programme VARCHAR(255),
         agreementTemplate_id BIGINT,
         invitationDeadline TIMESTAMP,
         CONSTRAINT fk_project_agreement_template
             FOREIGN KEY (agreementTemplate_id)
                 REFERENCES AgreementTemplate(id)
                 ON DELETE SET NULL
);

CREATE TABLE ChatMessage (
        id BIGINT AUTO_INCREMENT PRIMARY KEY,
        senderId BIGINT,
        receiverId BIGINT,
        messageContent VARCHAR(255),
        timestamp DATETIME,
        read BOOLEAN
);

CREATE TABLE UserRole (
      id LONG AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(255),
      description VARCHAR(255)
);

CREATE TABLE App_user_roles (
      User_id LONG,
      roles_id LONG,
      FOREIGN KEY (User_id) REFERENCES App_user(id),
      FOREIGN KEY (roles_id) REFERENCES UserRole(id)
);

CREATE TABLE invited_musicians_projects (
    musician_id BIGINT NOT NULL,
    project_id BIGINT NOT NULL,
    PRIMARY KEY (musician_id, project_id),
    FOREIGN KEY (musician_id) REFERENCES App_user(id),
    FOREIGN KEY (project_id) REFERENCES Project(id)
);

CREATE TABLE accepted_musicians_projects (
    musician_id BIGINT NOT NULL,
    project_id BIGINT NOT NULL,
    PRIMARY KEY (musician_id, project_id),
    FOREIGN KEY (musician_id) REFERENCES App_user(id),
    FOREIGN KEY (project_id) REFERENCES Project(id)
);

CREATE TABLE rejected_musicians_projects (
    musician_id BIGINT NOT NULL,
    project_id BIGINT NOT NULL,
    PRIMARY KEY (musician_id, project_id),
    FOREIGN KEY (musician_id) REFERENCES App_user(id),
    FOREIGN KEY (project_id) REFERENCES Project(id)
);

